{"ast":null,"code":"var _jsxFileName = \"/Users/saileshnaganath/my-react-projects/src/ThemeProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/React.createContext(false);\nfunction ThemeProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [toggle, setToggle] = useState(false);\n  const toggleFunction = () => {\n    setToggle(!toggle);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeProvider, \"KMOoc8w16Lq5ZnA3xKzfamBycFo=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\n\n/* The code starts by creating a new React context.\n \nThis is a special type of variable that allows you to keep track of state across different parts of your code.\n\nThe context will be used later in the code to store information about the current theme.\n\nNext, the code creates two variables: toggle and setToggle .\n\nThese variables will be used to store information about whether or not the theme is currently being displayed.\n\nThe next part of the code is where the magic happens.\n\nIt defines a function called toggleFunction .\n\nThis function will be responsible for changing the state of toggle based on user input.\n\nFinally, the ThemeProvider component is created and assigned as an attribute to the context object.\n\nThis component will contain all of the logic necessary to display and change themes.\n\nThe code creates a context which will be used to store the state of the toggle function.\n\nThe context will also be used to render the children of the ThemeProvider .\n\nThe useState() function is used to store the state of the toggle function.\n\nWhen the code is executed, it will first set the state of the toggle to false .\n\nThen, it will create a function called toggleFunction which will take one parameter - which will be set to true when the state of the toggle is false and false when it is true .\n\nFinally, it returns a React component called ThemeContext.Provider which renders a list of children.*/\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","useState","ThemeContext","createContext","ThemeProvider","children","toggle","setToggle","toggleFunction"],"sources":["/Users/saileshnaganath/my-react-projects/src/ThemeProvider.js"],"sourcesContent":["import React ,{useState} from 'react'\n\nexport const ThemeContext = React.createContext(false)\n\nfunction ThemeProvider({children}){\n  const [toggle, setToggle] = useState(false)\n  const toggleFunction = ()=>{\n    setToggle(!toggle);\n  }\n  return(\n    <ThemeContext.Provider>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport default ThemeProvider;\n\n/* The code starts by creating a new React context.\n \nThis is a special type of variable that allows you to keep track of state across different parts of your code.\n\nThe context will be used later in the code to store information about the current theme.\n\nNext, the code creates two variables: toggle and setToggle .\n\nThese variables will be used to store information about whether or not the theme is currently being displayed.\n\nThe next part of the code is where the magic happens.\n\nIt defines a function called toggleFunction .\n\nThis function will be responsible for changing the state of toggle based on user input.\n\nFinally, the ThemeProvider component is created and assigned as an attribute to the context object.\n\nThis component will contain all of the logic necessary to display and change themes.\n\nThe code creates a context which will be used to store the state of the toggle function.\n\nThe context will also be used to render the children of the ThemeProvider .\n\nThe useState() function is used to store the state of the toggle function.\n\nWhen the code is executed, it will first set the state of the toggle to false .\n\nThen, it will create a function called toggleFunction which will take one parameter - which will be set to true when the state of the toggle is false and false when it is true .\n\nFinally, it returns a React component called ThemeContext.Provider which renders a list of children.*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAA;AAErC,OAAO,MAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAa,CAAC,KAAK,CAAC;AAEtD,SAASC,aAAa,OAAY;EAAA;EAAA,IAAX;IAACC;EAAQ,CAAC;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAMO,cAAc,GAAG,MAAI;IACzBD,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EACD,oBACE,QAAC,YAAY,CAAC,QAAQ;IAAA,UACnBD;EAAQ;IAAA;IAAA;IAAA;EAAA,QACa;AAE5B;AAAC,GAVQD,aAAa;AAAA,KAAbA,aAAa;AAYtB,eAAeA,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA"},"metadata":{},"sourceType":"module"}